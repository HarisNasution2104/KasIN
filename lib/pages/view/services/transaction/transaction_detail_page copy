import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:http/http.dart' as http;
import 'package:myapp/pages/view/services/transaction/shop_detail_page.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:intl/intl.dart';

class TransactionsDetailPage extends StatefulWidget {
  const TransactionsDetailPage({super.key});

  @override
  State<TransactionsDetailPage> createState() => _TransactionsDetailPageState();
}

class _TransactionsDetailPageState extends State<TransactionsDetailPage> {
  final List<Map<String, dynamic>> barangList = [];
  final List<Map<String, dynamic>> jasaList = [];
  int totalBarangDitambahkan = 0;
  List<Map<String, dynamic>> barangDitambahkan = [];
  String _shopId = '';
  String _searchQuery = '';
  bool _isSearching = false;

  @override
  void initState() {
    super.initState();
    _loadShopId();
  }

  Future<void> _loadShopId() async {
    final prefs = await SharedPreferences.getInstance();
    _shopId = prefs.getString('shop_id') ?? '';
    if (_shopId.isNotEmpty) {
      await _fetchData();
    }
  }

  Future<void> _fetchData() async {
    try {
      final response = await http.post(
        Uri.parse('https://seputar-it.eu.org/Transaksi/get-barangjasa.php'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'shop_id': _shopId}),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);

        final List<dynamic> barangJson = (data['barang'] as List<dynamic>?) ?? [];
        final List<dynamic> jasaJson = (data['jasa'] as List<dynamic>?) ?? [];

        setState(() {
          barangList.clear();
          barangList.addAll(
              barangJson.map((item) => item as Map<String, dynamic>).toList());
          jasaList.clear();
          jasaList.addAll(
              jasaJson.map((item) => item as Map<String, dynamic>).toList());
        });
      } else {
        print('Failed to load data: ${response.statusCode}');
      }
    } catch (e) {
      print('Error fetching data: $e');
    }
  }

  List<Map<String, dynamic>> get filteredBarangList {
    return barangList
        .where((item) =>
            item['name'].toLowerCase().contains(_searchQuery.toLowerCase()) ||
            item['code'].toLowerCase().contains(_searchQuery.toLowerCase()) ||
            (item['description']?.toLowerCase().contains(_searchQuery.toLowerCase()) ?? false))
        .toList();
  }

  List<Map<String, dynamic>> get filteredJasaList {
    return jasaList
        .where((item) =>
            item['name'].toLowerCase().contains(_searchQuery.toLowerCase()) ||
            item['unique_code'].toLowerCase().contains(_searchQuery.toLowerCase()) ||
            (item['description']?.toLowerCase().contains(_searchQuery.toLowerCase()) ?? false))
        .toList();
  }

  @override
  Widget build(BuildContext context) {
    final currencyFormat =
        NumberFormat.currency(locale: 'id_ID', symbol: 'Rp ', decimalDigits: 0);

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.orange.shade900,
        title: Text('Transactions', style: TextStyle(color: Colors.white)),
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: Padding(
        padding: EdgeInsets.all(5.0),
        child: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                IconButton(
                  icon: Icon(Icons.search, color: Colors.orange.shade700),
                  onPressed: () {
                    setState(() {
                      _isSearching = !_isSearching;
                      // Reset search query when toggling search mode
                      if (!_isSearching) {
                        _searchQuery = '';
                      }
                    });
                  },
                ),
                IconButton(
                  icon: Icon(Icons.filter_list, color: Colors.orange.shade700),
                  onPressed: () {
                    // Handle filter action
                  },
                ),
                IconButton(
                  icon: Icon(Icons.add, color: Colors.orange.shade700),
                  onPressed: () {
                    // Handle add action
                  },
                ),
                IconButton(
                  icon: Icon(Icons.qr_code_scanner, color: Colors.orange.shade700),
                  onPressed: () {
                    // Handle barcode scan action
                  },
                ),
              ],
            ),
            if (_isSearching)
              Container(
                height: 35,
                margin: EdgeInsets.symmetric(vertical: 10),
                child: TextField(
                  onChanged: (value) {
                    setState(() {
                      _searchQuery = value;
                    });
                  },
                  decoration: InputDecoration(
                    contentPadding: EdgeInsets.symmetric(horizontal: 12),
                    labelText: 'Cari Barang',
                    labelStyle: TextStyle(color: Colors.orange.shade900),
                    border: OutlineInputBorder(
                      borderSide: BorderSide(color: Colors.orange.shade900),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderSide: BorderSide(color: Colors.orange.shade900),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderSide: BorderSide(color: Colors.orange.shade900, width: 2.0),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    filled: true,
                    fillColor: Colors.white60,
                  ),
                ),
              ),
            Expanded(
              child: ListView.builder(
                itemCount: filteredBarangList.length + filteredJasaList.length,
                itemBuilder: (context, index) {
                  final isBarang = index < filteredBarangList.length;
                  final data = isBarang
                      ? filteredBarangList[index]
                      : filteredJasaList[index - filteredBarangList.length];
                  final hasImage = data['image_path'] != null &&
                      data['image_path'].isNotEmpty;
                  return ListTile(
                    leading: hasImage
                        ? CircleAvatar(
                            radius: 20,
                            backgroundImage: NetworkImage(data['image_path']),
                          )
                        : CircleAvatar(
                            backgroundColor: Colors.grey.shade200,
                            child: Text(
                              data['name']?.substring(0, 2).toUpperCase() ?? 'AD',
                              style: TextStyle(color: Colors.black),
                            ),
                          ),
                    title: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(isBarang ? data['name'] : data['name']),
                          ],
                        ),
                        Container(
                          padding: EdgeInsets.symmetric(horizontal: 2, vertical: 2),
                          decoration: BoxDecoration(
                            color: Colors.orange.shade900,
                            borderRadius: BorderRadius.circular(3),
                          ),
                          child: Text(
                            isBarang ? '${data['quantity']}' : 'Unlimited',
                            style: TextStyle(color: Colors.white, fontSize: 11),
                          ),
                        ),
                      ],
                    ),
                    subtitle: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          isBarang ? data['code'] : data['unique_code'],
                          style: TextStyle(fontSize: 12, color: Colors.grey),
                        ),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.end,
                          children: [
                            Text(
                              isBarang
                                  ? currencyFormat.format(double.parse(data['price_sell']))
                                  : currencyFormat.format(double.parse(data['price'])),
                              style: TextStyle(color: Colors.black, fontSize: 12),
                            ),
                          ],
                        ),
                      ],
                    ),
                    onTap: () {
                      _tambahBarangKePesanan(data);
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
      floatingActionButton: Stack(
        children: [
          FloatingActionButton(
            backgroundColor: Colors.orange.shade900,
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => ShopDetailPage(
                    barangDitambahkan: List.from(barangDitambahkan),
                  ),
                ),
              );
            },
            child: Icon(FontAwesomeIcons.bagShopping, color: Colors.white),
            tooltip: 'Tambah Barang',
            shape: CircleBorder(),
          ),
          if (totalBarangDitambahkan > 0)
            Positioned(
              right: 0,
              top: 0,
              child: Container(
                padding: EdgeInsets.all(4),
                decoration: BoxDecoration(
                  color: Colors.red,
                  borderRadius: BorderRadius.circular(10),
                ),
                constraints: BoxConstraints(minWidth: 20),
                child: Text(
                  totalBarangDitambahkan.toString(),
                  style: TextStyle(
                      color: Colors.white,
                      fontSize: 12,
                      fontWeight: FontWeight.bold),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
        ],
      ),
    );
  }

  void _tambahBarangKePesanan(Map<String, dynamic> data) {
    setState(() {
      final existingBarangIndex = barangDitambahkan.indexWhere(
        (b) => b['code'] == data['code'],
      );

      if (existingBarangIndex != -1) {
        final existingBarang = barangDitambahkan[existingBarangIndex];
        final updatedBarang = {
          ...existingBarang,
          'quantity': existingBarang['quantity'] + 1
        };
        barangDitambahkan[existingBarangIndex] = updatedBarang;
      } else {
        barangDitambahkan.add({
          'id': data['id'],
          'shop_id': data['shop_id'],
          'name': data['name'],
          'code': data['code'],
          'quantity': 1,
          'price_buy': data['price_buy'],
          'price_sell': data['price_sell'],
          'price': data['price'],
          'category_id': data['category_id'],
          'image_path': data['image_path'],
          'description': data['description'] ?? '',
          'isBarang': data.containsKey('price_sell'),
        });
      }

      totalBarangDitambahkan = barangDitambahkan.fold<int>(
          0, (sum, item) => sum + (item['quantity'] as int));
    });
  }
}
